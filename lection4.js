// **************************************** –ü—Ä–∞–∫—Ç–∏–∫–∞  7 ****************************** //
// Task - 1
// –°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é logItems(), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤–∞, –∑—Ä–æ–±–∏ –ø–µ—Ä–µ–±—ñ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach().

// const logItems = arr => arr.forEach((item, idx)=> console.log(`${idx + 1} - ${item}`))

// // logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

|============================
    
// Task - 2
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//     const product = {
//         id: Date.now(),
//         ...obj
//     }
//     callback(product)
// }

// // function logProduct(product) {
// //     console.log(`Product`, product);
// // }

// // function logTotalPrice({ price, quantity }) {
// //     console.log(`Product total price ${price * quantity}`);

// // }

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);

|============================
    
// Task - 3
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
// 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// function each(arr, action) {
//     const items = [];

//     arr.forEach(elem => {
//         const result = action(elem);
//         items.push(result);
//     })

//     // arr.forEach(elem => items.push(action(elem)))

//     return items
// }

// console.log(each([64, 49, 36, 25, 16], value => value * 2));
// console.log(each([64, 49, 36, 25, 16], value => value - 10));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));

|============================
    
// Task-4
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó successCallback —Ç–∞ errorCallback. –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback.  –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
// const products = [
//     {
//         id: 1,
//         name: "–¢–µ–ª–µ—Ñ–æ–Ω",
//         price: 10000,
//         description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –¥–∏—Å–ø–ª–µ—î–º —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º.",
//     },
//     {
//         id: 2,
//         name: "–ù–æ—É—Ç–±—É–∫",
//         price: 25000,
//         description: "–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥.",
//     },
//     {
//         id: 3,
//         name: "–ü–ª–∞–Ω—à–µ—Ç",
//         price: 8000,
//         description: "–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
//     },
// ];

// function getProductDetails(id, success, error) {
//     for (const product of products) {
//         if (product.id === id) {
//             return success(product); //some value;
//         }
//     }

//     error(id);
// }

// getProductDetails(3, handleSuccess, handleError)
// // getProductDetails(44, handleSuccess, handleError)

// function handleSuccess(message) {
//     console.log(`‚úÖ Success!`, message);
// }

// function handleError(productId) {
//     console.log(`‚ùå Error! Product with ${productId} id not found`);
// }


// const arr = [1, 2, [5, 6, [2, 2]]];
// [1, 2]; // 18
// [5, 6]; //15
// [2, 2]; //4

// function add(arr) {
//     let total =0;
//     for (const value of arr) {
//         if (Array.isArray(value)) {
//             total += add(value)
//         } else {
//             total += value
//         }
//     }
//     return total;
// }

// console.log(add(arr));

// const arr = [1, 2, [5, 'hello', 6, [2, 'world', { a: 22, b: 25 }, 2]]];
// [1, 2]; // 18
// [5, 6]; //15
// [2, 2]; //4

// function add(arr) {
//     let total = 0;
//     for (const value of arr) {
//         if (Array.isArray(value)) {
//             total += add(value)
//         } else if (typeof value === 'number') {
//             total += value
//         } else if (typeof value === 'object') {
//             const values = Object.values(value);
//             total += add(values)
//         }
//     }
//     return total;
// }

// console.log(add(arr));




// **************************************** –ü—Ä–∞–∫—Ç–∏–∫–∞  8 ****************************** //

// Task-1
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ map, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, –≤ —è–∫–æ–º—É –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞. 

// const students = [
//     { name: 'John', grades: [80, 85, 90] },
//     { name: 'Alice', grades: [90, 95, 92] },
//     { name: 'Bob', grades: [70, 80, 75] },
//     { name: 'Emily', grades: [95, 92, 88] },
//     { name: 'David', grades: [85, 88, 90] }
// ];

// function getAverage(arr) {
//     const result = arr.map(({ name, grades }) => {
//         const total = grades.reduce((acc, item) => acc + item, 0)
//         const obj = {
//             name,
//             average: Math.round(total / grades.length)
//         }
//         return obj
//     });

//     return result;
// }
// console.log(getAverage(students));

|============================
    
// Task-2
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ filter, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏ —è–∫—ñ —Å—Ç–∞—Ä—à–µ 20 —Ä–æ–∫—ñ–≤


// const students = [
//     { name: 'John', age: 20, gpa: 3.8 },
//     { name: 'Alice', age: 21, gpa: 3.2 },
//     { name: 'Bob', age: 19, gpa: 3.5 },
//     { name: 'Emily', age: 22, gpa: 3.9 },
//     { name: 'David', age: 20, gpa: 3.7 }
// ];

// function getAdult(arr) {
//     // const result = arr.filter((student) => student.age > 20)

//     // return result;

//    return arr.filter(({age}) => age > 20)

// }
// console.log(getAdult(students));

|============================

// Task-3
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ find, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–Ω–∏–∂–∫—É –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é (title)
// const books = [
//     { title: 'JavaScript: The Good Parts', author: 'Douglas Crockford', year: 2008 },
//     { title: 'Clean Code: A Handbook of Agile Software Craftsmanship', author: 'Robert C. Martin', year: 2008 },
//     { title: 'The Pragmatic Programmer: Your Journey to Mastery', author: 'Andrew Hunt, David Thomas', year: 1999 },
//     { title: 'Design Patterns: Elements of Reusable Object-Oriented Software', author: 'Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides', year: 1994 },
//     { title: 'Refactoring: Improving the Design of Existing Code', author: 'Martin Fowler', year: 1999 }
// ];


// function getBook(arr, title) {
//     // const book = arr.find((book) => book.title === title);

// return book ? book : 'Not found'
//     // return book || 'Not found';


//   return arr.find(({title : bookTitle}) => bookTitle === title) || 'Not found';
// }
// console.log(getBook(books, 'Design Patterns: Elements of Reusable Object-Oriented Software'));
// console.log(getBook(books, 'qwerty'));

|============================
    
// Task-4
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ reduce, —â–æ–± –æ–±—á–∏—Å–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ, —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —è–∫ –¥–æ–±—É—Ç–æ–∫ —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É –Ω–∞ –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞ –ø–æ—Ç—ñ–º —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤.

// const products = [
//     { id: 1, name: 'T-shirt', price: 20, quantity: 3 },
//     { id: 2, name: 'Jeans', price: 50, quantity: 2 },
//     { id: 3, name: 'Sneakers', price: 80, quantity: 1 },
//     { id: 4, name: 'Hat', price: 15, quantity: 4 },
//     { id: 5, name: 'Socks', price: 5, quantity: 6 }
// ];

// function getTotal(arr) {
//     const total = arr.reduce((acc, product) => {
//         acc += product.price * product.quantity;
//         return acc;
//     }, 0)

//     return total;

//     // return arr.reduce((acc, { price, quantity }) => acc += price * quantity, 0)
// }
// console.log(getTotal(products));

|============================

// Task-5
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ sort, —â–æ–± –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–Ω–∏–∂–∫–∏ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–º –º–∞—Å–∏–≤–æ–º –∫–Ω–∏–∂–æ–∫ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è.


// const books = [
//     { title: 'JavaScript: The Good Parts', author: 'Douglas Crockford', year: 2008 },
//     { title: 'Clean Code: A Handbook of Agile Software Craftsmanship', author: 'Robert C. Martin', year: 2008 },
//     { title: 'The Pragmatic Programmer: Your Journey to Mastery', author: 'Andrew Hunt, David Thomas', year: 1999 },
//     { title: 'Design Patterns: Elements of Reusable Object-Oriented Software', author: 'Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides', year: 1994 },
//     { title: 'Refactoring: Improving the Design of Existing Code', author: 'Martin Fowler', year: 1999 }
// ];

// function sortDesc(arr) {
//     // const result = [...arr].sort((a, b) => b.year - a.year);
//     // return result;


//     return [...arr].sort((a, b) => b.year - a.year)
//     // .map(({ author, year }) => ({ author, year }));

// }
// console.log(sortDesc(books));

|============================
    
// Task-6
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É map —Ç–∞ filter, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–µ 2 –¥–æ–ª–∞—Ä—ñ–≤ —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç—É–π —ó—Ö –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º.
// const products = [
//     { id: 2, name: 'Banana', price: 0.99 },
//     { id: 1, name: 'Apple', price: 1.99 },
//     { id: 3, name: 'Orange', price: 2.49 },
//     { id: 4, name: 'Grapes', price: 3.99 }
// ];

// function getProducts(arr) {
//     // const min = arr.filter((product) => product.price < 2);
//     // const names = min.map((product) => product.name);
//     // names.sort((a, b) => a.localeCompare(b));

//     // return names

//     return arr.filter(({ price }) => price < 2)
//     .map(({ name }) => name)
//     .sort((a,b) => a.localeCompare(b));
// }
// console.log(getProducts(products));
// console.log(products);

// Task-7 HARD üòà

// –Ñ —Ä—è–¥–æ–∫ –≤ —è–∫–æ–º—É –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç–µ—Ä, –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–∫—É –Ω–µ–º–∞—î –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–±'—î–∫—Ç –¥–µ –∫–æ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –±—É–¥–µ –∫–ª—é—á–µ–º, –∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤ —è–∫—É –≤–æ–Ω–∞ –¥—É–±–ª—é—î—Ç—å—Å—è –±—É–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º –∫–ª—é—á–∞
const str = 'absdabsrgbadgtdswwbetflg';
// –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —è–∫–∏–π –æ—á—ñ–∫—É—î–º–æ
// const obj = {
//     a: 3,
//     b: 4,
//     s: 3,
//     // ...
// }
// const obj = str.split('')
//     .reduce((acc, item) => {
//         if (acc.hasOwnProperty(item)) { // item in acc
//             acc[item] += 1;
//         } else {
//             acc[item] = 1
//         }

//         return acc
//     }, {})

// console.log(obj);
